判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。

分析:首先判断是否是负数，如果是负数肯定不是回文数。

初步解题想用的是用栈，转换为字符串后将前一半的元素入栈，然后用后面的元素与出栈后的元素依次比较。如果是奇数则n/2+1位跳过

随后看题解后得到一个巧妙解法 ： 官方题解是将代判断数的后一半进行“翻转”，再与前一半进行比较。例如1221就将后两位变为12与前两位比较。
用算法表达极为 后位用 remain%10 + x % 10 ; 前半位则是 x /10 ;
判断到中位条件是 翻转后的数值＞x； 判断条件: (remain == x || remain/10 ==x /*奇数*/ ）

而后自己想到的是类似移位的操作，即从右往左读该数，若得出的数与原数相同，则是回文数。
代码如下：
class Solution {
public:
    bool isPalindrome(int x) {
        if(x < 0 )
        {
            return false ;
        }
        
        int remain = 0 , div = x ;
        long res = 0 ;
        while (div != 0)
        {
            remain = div%10;
            div = div/10;
            res = res *10 + remain;
        }
        
        if (res == x) return true ;
        else return false ;
        
    }
};
